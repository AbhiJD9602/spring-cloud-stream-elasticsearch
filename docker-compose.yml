version: "3.5"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.0
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      TZ: "${TZ-Europe/Berlin}"
    healthcheck:
      test: "echo stat | nc localhost $$ZOOKEEPER_CLIENT_PORT"
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:5.1.0
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      TZ: "${TZ-Europe/Berlin}"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      start_period: 30s

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:5.1.0
    container_name: kafka-rest-proxy
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
      TZ: "${TZ-Europe/Berlin}"
    healthcheck:
      test: "curl -f http://localhost:8082 || exit 1"
      start_period: 30s

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    container_name: kafka-topics-ui
    restart: unless-stopped
    depends_on:
      - kafka-rest-proxy
    ports:
      - "8085:8000"
    environment:
      KAFKA_REST_PROXY_URL: http://kafka-rest-proxy:8082
      PROXY: "true"
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://localhost:8000 ||Â exit 1"
      start_period: 30s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.4.2
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      cluster.name: docker-es-cluster
      discovery.type: single-node
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: "curl -f http://localhost:9200 || exit 1"
      start_period: 30s

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:2.12.6
    restart: unless-stopped
    ports:
      - "9411:9411"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9411" ]
      start_period: 30s

  eureka:
    container_name: eureka
    image: docker.mycompany.com/eureka-server:1.0.0
    restart: unless-stopped
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8761" ]
      start_period: 1m

  producer-api:
    container_name: producer-api
    image: docker.mycompany.com/producer-api:1.0.0
    restart: unless-stopped
    ports:
      - "9080:8080"
    depends_on:
      - kafka
      - eureka
      - zipkin
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      EUREKA_HOST: eureka
      ZIPKIN_HOST: zipkin
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8080" ]
      start_period: 2m

  categorizer-service:
    container_name: categorizer-service
    image: docker.mycompany.com/categorizer-service:1.0.0
    restart: unless-stopped
    ports:
      - "9081:8080"
    depends_on:
      - kafka
      - eureka
      - zipkin
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      EUREKA_HOST: eureka
      ZIPKIN_HOST: zipkin
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8080" ]
      start_period: 2m

  collector-service:
    container_name: collector-service
    image: docker.mycompany.com/collector-service:1.0.0
    restart: unless-stopped
    ports:
      - "9082:8080"
    depends_on:
      - kafka
      - elasticsearch
      - eureka
      - zipkin
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      ELASTICSEARCH_HOST: elasticsearch
      EUREKA_HOST: eureka
      ZIPKIN_HOST: zipkin
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8080" ]
      start_period: 2m

  publisher-api:
    container_name: publisher-api
    image: docker.mycompany.com/publisher-api:1.0.0
    restart: unless-stopped
    ports:
      - "9083:8080"
    depends_on:
      - elasticsearch
      - eureka
      - zipkin
    environment:
      ELASTICSEARCH_HOST: elasticsearch
      EUREKA_HOST: eureka
      ZIPKIN_HOST: zipkin
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8080" ]
      start_period: 2m

  news-client:
    container_name: news-client
    image: docker.mycompany.com/news-client:1.0.0
    restart: unless-stopped
    ports:
      - "9084:8080"
    depends_on:
      - elasticsearch
      - eureka
      - zipkin
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      EUREKA_HOST: eureka
      ZIPKIN_HOST: zipkin
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8080" ]
      start_period: 2m